# Build path
ifdef BOARD
export BUILD_DIR = build/$(BOARD_FILE_NAME)/build
else
export BUILD_DIR = build/$(MCU_FILE_NAME)/build
endif

export TARGET_DIR = $(BUILD_DIR)/..

C_DEFS += \
-DGIT_BRANCH=\"$(BRANCH)\" \
-DGIT_HASH=\"$(HASH)\" \
-DGIT_TAG=\"$(TAG)\"

# Check if the linker data script (LDS) is RAM version
ifeq (RAM, $(findstring RAM, $(LDSCRIPT))) 
	C_DEFS +=  \
	-DLDS_RAM_VERSION \
	-DVECT_TAB_SRAM 
endif

# Check if USB is FS or HS
ifeq ($(USB),FS)
	C_SOURCES += \
	Bootloader/STM32/UsbDevice/FS/usb_device.c \
	Bootloader/STM32/UsbDevice/FS/usbd_conf.c \
	Bootloader/STM32/UsbDevice/FS/usbd_desc.c \
	Bootloader/STM32/UsbDevice/FS/usbd_cdc_if.c
	
	C_INCLUDES += \
	-IBootloader/STM32/UsbDevice/FS
else
	C_SOURCES += \
	Bootloader/STM32/UsbDevice/HS/usb_device.c \
	Bootloader/STM32/UsbDevice/HS/usbd_conf.c \
	Bootloader/STM32/UsbDevice/HS/usbd_desc.c \
	Bootloader/STM32/UsbDevice/HS/usbd_cdc_if.c
	
	C_INCLUDES += \
	-IBootloader/STM32/UsbDevice/HS
endif

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2 -D$(MCU_FILE_NAME) -D$(FLASH)
endif

ifdef BOARD
CFLAGS += -D$(BOARD)
TARGET := $(TARGET)_$(BOARD_FILE_NAME)
else
TARGET := $(TARGET)_$(MCU_FILE_NAME)
endif

# Check secure flag
ifeq ($(secure), true)
	C_DEFS +=  \
	-DSECURED
endif

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

#linker
LD_NAME = $(basename $(LDSCRIPT))
LD_SUFFIX = $(suffix $(LDSCRIPT))

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -TLinker/$(LD_NAME)$(LD_SUFFIX) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections
LDFLAGS_SIGNATURE = $(MCU) -specs=nano.specs -TLinker/$(LD_NAME)_SIGNATURE$(LD_SUFFIX) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: debug signed

debug: $(TARGET_DIR)/$(TARGET).elf $(TARGET_DIR)/$(TARGET).hex $(TARGET_DIR)/$(TARGET).bin

signed: $(TARGET_DIR)/$(TARGET)_signed.elf $(TARGET_DIR)/$(TARGET)_signed.bin

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(TARGET_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@
	
$(TARGET_DIR)/$(TARGET)_signed.elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS_SIGNATURE) -o $@
	$(SZ) $@

$(TARGET_DIR)/%.hex: $(TARGET_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(TARGET_DIR)/%.bin: $(TARGET_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@
	
$(TARGET_DIR)/%_signed.bin: $(TARGET_DIR)/%_signed.elf | $(BUILD_DIR)
	$(BIN) $< $@
	
$(BUILD_DIR):
	mkdir -p $@
	
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)
	
# ** EOF **