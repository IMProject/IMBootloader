/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_SECURITY_ADAPTER_H
#define _MOCK_SECURITY_ADAPTER_H

#include "unity.h"
#include "security_adapter.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_security_adapter_Init(void);
void mock_security_adapter_Destroy(void);
void mock_security_adapter_Verify(void);




#define SecurityAdapter_init_Ignore() SecurityAdapter_init_CMockIgnore()
void SecurityAdapter_init_CMockIgnore(void);
#define SecurityAdapter_init_StopIgnore() SecurityAdapter_init_CMockStopIgnore()
void SecurityAdapter_init_CMockStopIgnore(void);
#define SecurityAdapter_init_Expect() SecurityAdapter_init_CMockExpect(__LINE__)
void SecurityAdapter_init_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_SecurityAdapter_init_CALLBACK)(int cmock_num_calls);
void SecurityAdapter_init_AddCallback(CMOCK_SecurityAdapter_init_CALLBACK Callback);
void SecurityAdapter_init_Stub(CMOCK_SecurityAdapter_init_CALLBACK Callback);
#define SecurityAdapter_init_StubWithCallback SecurityAdapter_init_Stub
#define SecurityAdapter_getRandomData_IgnoreAndReturn(cmock_retval) SecurityAdapter_getRandomData_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void SecurityAdapter_getRandomData_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define SecurityAdapter_getRandomData_StopIgnore() SecurityAdapter_getRandomData_CMockStopIgnore()
void SecurityAdapter_getRandomData_CMockStopIgnore(void);
#define SecurityAdapter_getRandomData_ExpectAndReturn(data, size, cmock_retval) SecurityAdapter_getRandomData_CMockExpectAndReturn(__LINE__, data, size, cmock_retval)
void SecurityAdapter_getRandomData_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* data, uint32_t size, bool cmock_to_return);
typedef bool (* CMOCK_SecurityAdapter_getRandomData_CALLBACK)(uint8_t* data, uint32_t size, int cmock_num_calls);
void SecurityAdapter_getRandomData_AddCallback(CMOCK_SecurityAdapter_getRandomData_CALLBACK Callback);
void SecurityAdapter_getRandomData_Stub(CMOCK_SecurityAdapter_getRandomData_CALLBACK Callback);
#define SecurityAdapter_getRandomData_StubWithCallback SecurityAdapter_getRandomData_Stub
#define SecurityAdapter_getRandomData_ExpectWithArrayAndReturn(data, data_Depth, size, cmock_retval) SecurityAdapter_getRandomData_CMockExpectWithArrayAndReturn(__LINE__, data, data_Depth, size, cmock_retval)
void SecurityAdapter_getRandomData_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* data, int data_Depth, uint32_t size, bool cmock_to_return);
#define SecurityAdapter_getRandomData_ReturnThruPtr_data(data) SecurityAdapter_getRandomData_CMockReturnMemThruPtr_data(__LINE__, data, sizeof(uint8_t))
#define SecurityAdapter_getRandomData_ReturnArrayThruPtr_data(data, cmock_len) SecurityAdapter_getRandomData_CMockReturnMemThruPtr_data(__LINE__, data, cmock_len * sizeof(*data))
#define SecurityAdapter_getRandomData_ReturnMemThruPtr_data(data, cmock_size) SecurityAdapter_getRandomData_CMockReturnMemThruPtr_data(__LINE__, data, cmock_size)
void SecurityAdapter_getRandomData_CMockReturnMemThruPtr_data(UNITY_LINE_TYPE cmock_line, uint8_t const* data, size_t cmock_size);
#define SecurityAdapter_getRandomData_IgnoreArg_data() SecurityAdapter_getRandomData_CMockIgnoreArg_data(__LINE__)
void SecurityAdapter_getRandomData_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define SecurityAdapter_getRandomData_IgnoreArg_size() SecurityAdapter_getRandomData_CMockIgnoreArg_size(__LINE__)
void SecurityAdapter_getRandomData_CMockIgnoreArg_size(UNITY_LINE_TYPE cmock_line);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
