/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_JSON_H
#define _MOCK_JSON_H

#include "unity.h"
#include "json.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_json_Init(void);
void mock_json_Destroy(void);
void mock_json_Verify(void);




#define Json_startString_IgnoreAndReturn(cmock_retval) Json_startString_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Json_startString_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define Json_startString_StopIgnore() Json_startString_CMockStopIgnore()
void Json_startString_CMockStopIgnore(void);
#define Json_startString_ExpectAnyArgsAndReturn(cmock_retval) Json_startString_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void Json_startString_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define Json_startString_ExpectAndReturn(buffer, buffer_size, cmock_retval) Json_startString_CMockExpectAndReturn(__LINE__, buffer, buffer_size, cmock_retval)
void Json_startString_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* buffer, size_t buffer_size, bool cmock_to_return);
typedef bool (* CMOCK_Json_startString_CALLBACK)(char* buffer, size_t buffer_size, int cmock_num_calls);
void Json_startString_AddCallback(CMOCK_Json_startString_CALLBACK Callback);
void Json_startString_Stub(CMOCK_Json_startString_CALLBACK Callback);
#define Json_startString_StubWithCallback Json_startString_Stub
#define Json_startString_ReturnThruPtr_buffer(buffer) Json_startString_CMockReturnMemThruPtr_buffer(__LINE__, buffer, sizeof(char))
#define Json_startString_ReturnArrayThruPtr_buffer(buffer, cmock_len) Json_startString_CMockReturnMemThruPtr_buffer(__LINE__, buffer, cmock_len * sizeof(*buffer))
#define Json_startString_ReturnMemThruPtr_buffer(buffer, cmock_size) Json_startString_CMockReturnMemThruPtr_buffer(__LINE__, buffer, cmock_size)
void Json_startString_CMockReturnMemThruPtr_buffer(UNITY_LINE_TYPE cmock_line, char const* buffer, size_t cmock_size);
#define Json_startString_IgnoreArg_buffer() Json_startString_CMockIgnoreArg_buffer(__LINE__)
void Json_startString_CMockIgnoreArg_buffer(UNITY_LINE_TYPE cmock_line);
#define Json_startString_IgnoreArg_buffer_size() Json_startString_CMockIgnoreArg_buffer_size(__LINE__)
void Json_startString_CMockIgnoreArg_buffer_size(UNITY_LINE_TYPE cmock_line);
#define Json_addData_IgnoreAndReturn(cmock_retval) Json_addData_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Json_addData_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define Json_addData_StopIgnore() Json_addData_CMockStopIgnore()
void Json_addData_CMockStopIgnore(void);
#define Json_addData_ExpectAnyArgsAndReturn(cmock_retval) Json_addData_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void Json_addData_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define Json_addData_ExpectAndReturn(buffer, buffer_size, key, value, cmock_retval) Json_addData_CMockExpectAndReturn(__LINE__, buffer, buffer_size, key, value, cmock_retval)
void Json_addData_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* buffer, size_t buffer_size, const char* key, const char* value, bool cmock_to_return);
typedef bool (* CMOCK_Json_addData_CALLBACK)(char* buffer, size_t buffer_size, const char* key, const char* value, int cmock_num_calls);
void Json_addData_AddCallback(CMOCK_Json_addData_CALLBACK Callback);
void Json_addData_Stub(CMOCK_Json_addData_CALLBACK Callback);
#define Json_addData_StubWithCallback Json_addData_Stub
#define Json_addData_ReturnThruPtr_buffer(buffer) Json_addData_CMockReturnMemThruPtr_buffer(__LINE__, buffer, sizeof(char))
#define Json_addData_ReturnArrayThruPtr_buffer(buffer, cmock_len) Json_addData_CMockReturnMemThruPtr_buffer(__LINE__, buffer, cmock_len * sizeof(*buffer))
#define Json_addData_ReturnMemThruPtr_buffer(buffer, cmock_size) Json_addData_CMockReturnMemThruPtr_buffer(__LINE__, buffer, cmock_size)
void Json_addData_CMockReturnMemThruPtr_buffer(UNITY_LINE_TYPE cmock_line, char const* buffer, size_t cmock_size);
#define Json_addData_IgnoreArg_buffer() Json_addData_CMockIgnoreArg_buffer(__LINE__)
void Json_addData_CMockIgnoreArg_buffer(UNITY_LINE_TYPE cmock_line);
#define Json_addData_IgnoreArg_buffer_size() Json_addData_CMockIgnoreArg_buffer_size(__LINE__)
void Json_addData_CMockIgnoreArg_buffer_size(UNITY_LINE_TYPE cmock_line);
#define Json_addData_IgnoreArg_key() Json_addData_CMockIgnoreArg_key(__LINE__)
void Json_addData_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define Json_addData_IgnoreArg_value() Json_addData_CMockIgnoreArg_value(__LINE__)
void Json_addData_CMockIgnoreArg_value(UNITY_LINE_TYPE cmock_line);
#define Json_endString_IgnoreAndReturn(cmock_retval) Json_endString_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Json_endString_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define Json_endString_StopIgnore() Json_endString_CMockStopIgnore()
void Json_endString_CMockStopIgnore(void);
#define Json_endString_ExpectAnyArgsAndReturn(cmock_retval) Json_endString_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void Json_endString_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define Json_endString_ExpectAndReturn(buffer, buffer_size, cmock_retval) Json_endString_CMockExpectAndReturn(__LINE__, buffer, buffer_size, cmock_retval)
void Json_endString_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* buffer, size_t buffer_size, bool cmock_to_return);
typedef bool (* CMOCK_Json_endString_CALLBACK)(char* buffer, size_t buffer_size, int cmock_num_calls);
void Json_endString_AddCallback(CMOCK_Json_endString_CALLBACK Callback);
void Json_endString_Stub(CMOCK_Json_endString_CALLBACK Callback);
#define Json_endString_StubWithCallback Json_endString_Stub
#define Json_endString_ReturnThruPtr_buffer(buffer) Json_endString_CMockReturnMemThruPtr_buffer(__LINE__, buffer, sizeof(char))
#define Json_endString_ReturnArrayThruPtr_buffer(buffer, cmock_len) Json_endString_CMockReturnMemThruPtr_buffer(__LINE__, buffer, cmock_len * sizeof(*buffer))
#define Json_endString_ReturnMemThruPtr_buffer(buffer, cmock_size) Json_endString_CMockReturnMemThruPtr_buffer(__LINE__, buffer, cmock_size)
void Json_endString_CMockReturnMemThruPtr_buffer(UNITY_LINE_TYPE cmock_line, char const* buffer, size_t cmock_size);
#define Json_endString_IgnoreArg_buffer() Json_endString_CMockIgnoreArg_buffer(__LINE__)
void Json_endString_CMockIgnoreArg_buffer(UNITY_LINE_TYPE cmock_line);
#define Json_endString_IgnoreArg_buffer_size() Json_endString_CMockIgnoreArg_buffer_size(__LINE__)
void Json_endString_CMockIgnoreArg_buffer_size(UNITY_LINE_TYPE cmock_line);
#define Json_findByKey_IgnoreAndReturn(cmock_retval) Json_findByKey_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Json_findByKey_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define Json_findByKey_StopIgnore() Json_findByKey_CMockStopIgnore()
void Json_findByKey_CMockStopIgnore(void);
#define Json_findByKey_ExpectAnyArgsAndReturn(cmock_retval) Json_findByKey_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void Json_findByKey_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define Json_findByKey_ExpectAndReturn(buffer, buffer_size, key, value, max_value_size, cmock_retval) Json_findByKey_CMockExpectAndReturn(__LINE__, buffer, buffer_size, key, value, max_value_size, cmock_retval)
void Json_findByKey_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* buffer, size_t buffer_size, const char* key, char* value, size_t max_value_size, bool cmock_to_return);
typedef bool (* CMOCK_Json_findByKey_CALLBACK)(const char* buffer, size_t buffer_size, const char* key, char* value, size_t max_value_size, int cmock_num_calls);
void Json_findByKey_AddCallback(CMOCK_Json_findByKey_CALLBACK Callback);
void Json_findByKey_Stub(CMOCK_Json_findByKey_CALLBACK Callback);
#define Json_findByKey_StubWithCallback Json_findByKey_Stub
#define Json_findByKey_ReturnThruPtr_value(value) Json_findByKey_CMockReturnMemThruPtr_value(__LINE__, value, sizeof(char))
#define Json_findByKey_ReturnArrayThruPtr_value(value, cmock_len) Json_findByKey_CMockReturnMemThruPtr_value(__LINE__, value, cmock_len * sizeof(*value))
#define Json_findByKey_ReturnMemThruPtr_value(value, cmock_size) Json_findByKey_CMockReturnMemThruPtr_value(__LINE__, value, cmock_size)
void Json_findByKey_CMockReturnMemThruPtr_value(UNITY_LINE_TYPE cmock_line, char const* value, size_t cmock_size);
#define Json_findByKey_IgnoreArg_buffer() Json_findByKey_CMockIgnoreArg_buffer(__LINE__)
void Json_findByKey_CMockIgnoreArg_buffer(UNITY_LINE_TYPE cmock_line);
#define Json_findByKey_IgnoreArg_buffer_size() Json_findByKey_CMockIgnoreArg_buffer_size(__LINE__)
void Json_findByKey_CMockIgnoreArg_buffer_size(UNITY_LINE_TYPE cmock_line);
#define Json_findByKey_IgnoreArg_key() Json_findByKey_CMockIgnoreArg_key(__LINE__)
void Json_findByKey_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define Json_findByKey_IgnoreArg_value() Json_findByKey_CMockIgnoreArg_value(__LINE__)
void Json_findByKey_CMockIgnoreArg_value(UNITY_LINE_TYPE cmock_line);
#define Json_findByKey_IgnoreArg_max_value_size() Json_findByKey_CMockIgnoreArg_max_value_size(__LINE__)
void Json_findByKey_CMockIgnoreArg_max_value_size(UNITY_LINE_TYPE cmock_line);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
