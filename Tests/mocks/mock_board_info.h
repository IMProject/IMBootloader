/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_BOARD_INFO_H
#define _MOCK_BOARD_INFO_H

#include "unity.h"
#include "board_info.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_board_info_Init(void);
void mock_board_info_Destroy(void);
void mock_board_info_Verify(void);




#define BoardInfo_getDataJson_IgnoreAndReturn(cmock_retval) BoardInfo_getDataJson_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void BoardInfo_getDataJson_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define BoardInfo_getDataJson_StopIgnore() BoardInfo_getDataJson_CMockStopIgnore()
void BoardInfo_getDataJson_CMockStopIgnore(void);
#define BoardInfo_getDataJson_ExpectAnyArgsAndReturn(cmock_retval) BoardInfo_getDataJson_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void BoardInfo_getDataJson_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define BoardInfo_getDataJson_ExpectAndReturn(buffer, size, cmock_retval) BoardInfo_getDataJson_CMockExpectAndReturn(__LINE__, buffer, size, cmock_retval)
void BoardInfo_getDataJson_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* buffer, size_t size, bool cmock_to_return);
typedef bool (* CMOCK_BoardInfo_getDataJson_CALLBACK)(uint8_t* buffer, size_t size, int cmock_num_calls);
void BoardInfo_getDataJson_AddCallback(CMOCK_BoardInfo_getDataJson_CALLBACK Callback);
void BoardInfo_getDataJson_Stub(CMOCK_BoardInfo_getDataJson_CALLBACK Callback);
#define BoardInfo_getDataJson_StubWithCallback BoardInfo_getDataJson_Stub
#define BoardInfo_getDataJson_ExpectWithArrayAndReturn(buffer, buffer_Depth, size, cmock_retval) BoardInfo_getDataJson_CMockExpectWithArrayAndReturn(__LINE__, buffer, buffer_Depth, size, cmock_retval)
void BoardInfo_getDataJson_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* buffer, int buffer_Depth, size_t size, bool cmock_to_return);
#define BoardInfo_getDataJson_ReturnThruPtr_buffer(buffer) BoardInfo_getDataJson_CMockReturnMemThruPtr_buffer(__LINE__, buffer, sizeof(uint8_t))
#define BoardInfo_getDataJson_ReturnArrayThruPtr_buffer(buffer, cmock_len) BoardInfo_getDataJson_CMockReturnMemThruPtr_buffer(__LINE__, buffer, cmock_len * sizeof(*buffer))
#define BoardInfo_getDataJson_ReturnMemThruPtr_buffer(buffer, cmock_size) BoardInfo_getDataJson_CMockReturnMemThruPtr_buffer(__LINE__, buffer, cmock_size)
void BoardInfo_getDataJson_CMockReturnMemThruPtr_buffer(UNITY_LINE_TYPE cmock_line, uint8_t const* buffer, size_t cmock_size);
#define BoardInfo_getDataJson_IgnoreArg_buffer() BoardInfo_getDataJson_CMockIgnoreArg_buffer(__LINE__)
void BoardInfo_getDataJson_CMockIgnoreArg_buffer(UNITY_LINE_TYPE cmock_line);
#define BoardInfo_getDataJson_IgnoreArg_size() BoardInfo_getDataJson_CMockIgnoreArg_size(__LINE__)
void BoardInfo_getDataJson_CMockIgnoreArg_size(UNITY_LINE_TYPE cmock_line);
#define BoardInfo_getBase64ManufacturerId_IgnoreAndReturn(cmock_retval) BoardInfo_getBase64ManufacturerId_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void BoardInfo_getBase64ManufacturerId_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define BoardInfo_getBase64ManufacturerId_StopIgnore() BoardInfo_getBase64ManufacturerId_CMockStopIgnore()
void BoardInfo_getBase64ManufacturerId_CMockStopIgnore(void);
#define BoardInfo_getBase64ManufacturerId_ExpectAnyArgsAndReturn(cmock_retval) BoardInfo_getBase64ManufacturerId_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void BoardInfo_getBase64ManufacturerId_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define BoardInfo_getBase64ManufacturerId_ExpectAndReturn(b64_manufacturer_id, cmock_retval) BoardInfo_getBase64ManufacturerId_CMockExpectAndReturn(__LINE__, b64_manufacturer_id, cmock_retval)
void BoardInfo_getBase64ManufacturerId_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* b64_manufacturer_id, bool cmock_to_return);
typedef bool (* CMOCK_BoardInfo_getBase64ManufacturerId_CALLBACK)(uint8_t* b64_manufacturer_id, int cmock_num_calls);
void BoardInfo_getBase64ManufacturerId_AddCallback(CMOCK_BoardInfo_getBase64ManufacturerId_CALLBACK Callback);
void BoardInfo_getBase64ManufacturerId_Stub(CMOCK_BoardInfo_getBase64ManufacturerId_CALLBACK Callback);
#define BoardInfo_getBase64ManufacturerId_StubWithCallback BoardInfo_getBase64ManufacturerId_Stub
#define BoardInfo_getBase64ManufacturerId_ExpectWithArrayAndReturn(b64_manufacturer_id, b64_manufacturer_id_Depth, cmock_retval) BoardInfo_getBase64ManufacturerId_CMockExpectWithArrayAndReturn(__LINE__, b64_manufacturer_id, b64_manufacturer_id_Depth, cmock_retval)
void BoardInfo_getBase64ManufacturerId_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* b64_manufacturer_id, int b64_manufacturer_id_Depth, bool cmock_to_return);
#define BoardInfo_getBase64ManufacturerId_ReturnThruPtr_b64_manufacturer_id(b64_manufacturer_id) BoardInfo_getBase64ManufacturerId_CMockReturnMemThruPtr_b64_manufacturer_id(__LINE__, b64_manufacturer_id, sizeof(uint8_t))
#define BoardInfo_getBase64ManufacturerId_ReturnArrayThruPtr_b64_manufacturer_id(b64_manufacturer_id, cmock_len) BoardInfo_getBase64ManufacturerId_CMockReturnMemThruPtr_b64_manufacturer_id(__LINE__, b64_manufacturer_id, cmock_len * sizeof(*b64_manufacturer_id))
#define BoardInfo_getBase64ManufacturerId_ReturnMemThruPtr_b64_manufacturer_id(b64_manufacturer_id, cmock_size) BoardInfo_getBase64ManufacturerId_CMockReturnMemThruPtr_b64_manufacturer_id(__LINE__, b64_manufacturer_id, cmock_size)
void BoardInfo_getBase64ManufacturerId_CMockReturnMemThruPtr_b64_manufacturer_id(UNITY_LINE_TYPE cmock_line, uint8_t const* b64_manufacturer_id, size_t cmock_size);
#define BoardInfo_getBase64ManufacturerId_IgnoreArg_b64_manufacturer_id() BoardInfo_getBase64ManufacturerId_CMockIgnoreArg_b64_manufacturer_id(__LINE__)
void BoardInfo_getBase64ManufacturerId_CMockIgnoreArg_b64_manufacturer_id(UNITY_LINE_TYPE cmock_line);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
