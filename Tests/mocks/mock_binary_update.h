/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_BINARY_UPDATE_H
#define _MOCK_BINARY_UPDATE_H

#include "unity.h"
#include "binary_update.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_binary_update_Init(void);
void mock_binary_update_Destroy(void);
void mock_binary_update_Verify(void);




#define BinaryUpdate_handleDetectedBinary_IgnoreAndReturn(cmock_retval) BinaryUpdate_handleDetectedBinary_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void BinaryUpdate_handleDetectedBinary_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define BinaryUpdate_handleDetectedBinary_StopIgnore() BinaryUpdate_handleDetectedBinary_CMockStopIgnore()
void BinaryUpdate_handleDetectedBinary_CMockStopIgnore(void);
#define BinaryUpdate_handleDetectedBinary_ExpectAndReturn(detected_binary, cmock_retval) BinaryUpdate_handleDetectedBinary_CMockExpectAndReturn(__LINE__, detected_binary, cmock_retval)
void BinaryUpdate_handleDetectedBinary_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, signatureType_E detected_binary, bool cmock_to_return);
typedef bool (* CMOCK_BinaryUpdate_handleDetectedBinary_CALLBACK)(signatureType_E detected_binary, int cmock_num_calls);
void BinaryUpdate_handleDetectedBinary_AddCallback(CMOCK_BinaryUpdate_handleDetectedBinary_CALLBACK Callback);
void BinaryUpdate_handleDetectedBinary_Stub(CMOCK_BinaryUpdate_handleDetectedBinary_CALLBACK Callback);
#define BinaryUpdate_handleDetectedBinary_StubWithCallback BinaryUpdate_handleDetectedBinary_Stub
#define BinaryUpdate_handleDetectedBinary_IgnoreArg_detected_binary() BinaryUpdate_handleDetectedBinary_CMockIgnoreArg_detected_binary(__LINE__)
void BinaryUpdate_handleDetectedBinary_CMockIgnoreArg_detected_binary(UNITY_LINE_TYPE cmock_line);
#define BinaryUpdate_handleBootInfo_Ignore() BinaryUpdate_handleBootInfo_CMockIgnore()
void BinaryUpdate_handleBootInfo_CMockIgnore(void);
#define BinaryUpdate_handleBootInfo_StopIgnore() BinaryUpdate_handleBootInfo_CMockStopIgnore()
void BinaryUpdate_handleBootInfo_CMockStopIgnore(void);
#define BinaryUpdate_handleBootInfo_Expect() BinaryUpdate_handleBootInfo_CMockExpect(__LINE__)
void BinaryUpdate_handleBootInfo_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_BinaryUpdate_handleBootInfo_CALLBACK)(int cmock_num_calls);
void BinaryUpdate_handleBootInfo_AddCallback(CMOCK_BinaryUpdate_handleBootInfo_CALLBACK Callback);
void BinaryUpdate_handleBootInfo_Stub(CMOCK_BinaryUpdate_handleBootInfo_CALLBACK Callback);
#define BinaryUpdate_handleBootInfo_StubWithCallback BinaryUpdate_handleBootInfo_Stub
#define BinaryUpdate_getJumpAddress_IgnoreAndReturn(cmock_retval) BinaryUpdate_getJumpAddress_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void BinaryUpdate_getJumpAddress_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define BinaryUpdate_getJumpAddress_StopIgnore() BinaryUpdate_getJumpAddress_CMockStopIgnore()
void BinaryUpdate_getJumpAddress_CMockStopIgnore(void);
#define BinaryUpdate_getJumpAddress_ExpectAndReturn(cmock_retval) BinaryUpdate_getJumpAddress_CMockExpectAndReturn(__LINE__, cmock_retval)
void BinaryUpdate_getJumpAddress_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_BinaryUpdate_getJumpAddress_CALLBACK)(int cmock_num_calls);
void BinaryUpdate_getJumpAddress_AddCallback(CMOCK_BinaryUpdate_getJumpAddress_CALLBACK Callback);
void BinaryUpdate_getJumpAddress_Stub(CMOCK_BinaryUpdate_getJumpAddress_CALLBACK Callback);
#define BinaryUpdate_getJumpAddress_StubWithCallback BinaryUpdate_getJumpAddress_Stub
#define BinaryUpdate_resetJumpAddress_Ignore() BinaryUpdate_resetJumpAddress_CMockIgnore()
void BinaryUpdate_resetJumpAddress_CMockIgnore(void);
#define BinaryUpdate_resetJumpAddress_StopIgnore() BinaryUpdate_resetJumpAddress_CMockStopIgnore()
void BinaryUpdate_resetJumpAddress_CMockStopIgnore(void);
#define BinaryUpdate_resetJumpAddress_Expect() BinaryUpdate_resetJumpAddress_CMockExpect(__LINE__)
void BinaryUpdate_resetJumpAddress_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_BinaryUpdate_resetJumpAddress_CALLBACK)(int cmock_num_calls);
void BinaryUpdate_resetJumpAddress_AddCallback(CMOCK_BinaryUpdate_resetJumpAddress_CALLBACK Callback);
void BinaryUpdate_resetJumpAddress_Stub(CMOCK_BinaryUpdate_resetJumpAddress_CALLBACK Callback);
#define BinaryUpdate_resetJumpAddress_StubWithCallback BinaryUpdate_resetJumpAddress_Stub
#define BinaryUpdate_checkSkipLoopFlag_IgnoreAndReturn(cmock_retval) BinaryUpdate_checkSkipLoopFlag_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void BinaryUpdate_checkSkipLoopFlag_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define BinaryUpdate_checkSkipLoopFlag_StopIgnore() BinaryUpdate_checkSkipLoopFlag_CMockStopIgnore()
void BinaryUpdate_checkSkipLoopFlag_CMockStopIgnore(void);
#define BinaryUpdate_checkSkipLoopFlag_ExpectAndReturn(cmock_retval) BinaryUpdate_checkSkipLoopFlag_CMockExpectAndReturn(__LINE__, cmock_retval)
void BinaryUpdate_checkSkipLoopFlag_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
typedef bool (* CMOCK_BinaryUpdate_checkSkipLoopFlag_CALLBACK)(int cmock_num_calls);
void BinaryUpdate_checkSkipLoopFlag_AddCallback(CMOCK_BinaryUpdate_checkSkipLoopFlag_CALLBACK Callback);
void BinaryUpdate_checkSkipLoopFlag_Stub(CMOCK_BinaryUpdate_checkSkipLoopFlag_CALLBACK Callback);
#define BinaryUpdate_checkSkipLoopFlag_StubWithCallback BinaryUpdate_checkSkipLoopFlag_Stub
#define BinaryUpdate_disableLoopFlag_Ignore() BinaryUpdate_disableLoopFlag_CMockIgnore()
void BinaryUpdate_disableLoopFlag_CMockIgnore(void);
#define BinaryUpdate_disableLoopFlag_StopIgnore() BinaryUpdate_disableLoopFlag_CMockStopIgnore()
void BinaryUpdate_disableLoopFlag_CMockStopIgnore(void);
#define BinaryUpdate_disableLoopFlag_Expect() BinaryUpdate_disableLoopFlag_CMockExpect(__LINE__)
void BinaryUpdate_disableLoopFlag_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_BinaryUpdate_disableLoopFlag_CALLBACK)(int cmock_num_calls);
void BinaryUpdate_disableLoopFlag_AddCallback(CMOCK_BinaryUpdate_disableLoopFlag_CALLBACK Callback);
void BinaryUpdate_disableLoopFlag_Stub(CMOCK_BinaryUpdate_disableLoopFlag_CALLBACK Callback);
#define BinaryUpdate_disableLoopFlag_StubWithCallback BinaryUpdate_disableLoopFlag_Stub
#define BinaryUpdate_erase_IgnoreAndReturn(cmock_retval) BinaryUpdate_erase_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void BinaryUpdate_erase_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define BinaryUpdate_erase_StopIgnore() BinaryUpdate_erase_CMockStopIgnore()
void BinaryUpdate_erase_CMockStopIgnore(void);
#define BinaryUpdate_erase_ExpectAndReturn(firmware_size, cmock_retval) BinaryUpdate_erase_CMockExpectAndReturn(__LINE__, firmware_size, cmock_retval)
void BinaryUpdate_erase_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t firmware_size, bool cmock_to_return);
typedef bool (* CMOCK_BinaryUpdate_erase_CALLBACK)(uint32_t firmware_size, int cmock_num_calls);
void BinaryUpdate_erase_AddCallback(CMOCK_BinaryUpdate_erase_CALLBACK Callback);
void BinaryUpdate_erase_Stub(CMOCK_BinaryUpdate_erase_CALLBACK Callback);
#define BinaryUpdate_erase_StubWithCallback BinaryUpdate_erase_Stub
#define BinaryUpdate_erase_IgnoreArg_firmware_size() BinaryUpdate_erase_CMockIgnoreArg_firmware_size(__LINE__)
void BinaryUpdate_erase_CMockIgnoreArg_firmware_size(UNITY_LINE_TYPE cmock_line);
#define BinaryUpdate_write_IgnoreAndReturn(cmock_retval) BinaryUpdate_write_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void BinaryUpdate_write_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define BinaryUpdate_write_StopIgnore() BinaryUpdate_write_CMockStopIgnore()
void BinaryUpdate_write_CMockStopIgnore(void);
#define BinaryUpdate_write_ExpectAndReturn(write_buffer, packet_length, cmock_retval) BinaryUpdate_write_CMockExpectAndReturn(__LINE__, write_buffer, packet_length, cmock_retval)
void BinaryUpdate_write_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* write_buffer, const uint32_t packet_length, bool cmock_to_return);
typedef bool (* CMOCK_BinaryUpdate_write_CALLBACK)(uint8_t* write_buffer, const uint32_t packet_length, int cmock_num_calls);
void BinaryUpdate_write_AddCallback(CMOCK_BinaryUpdate_write_CALLBACK Callback);
void BinaryUpdate_write_Stub(CMOCK_BinaryUpdate_write_CALLBACK Callback);
#define BinaryUpdate_write_StubWithCallback BinaryUpdate_write_Stub
#define BinaryUpdate_write_ExpectWithArrayAndReturn(write_buffer, write_buffer_Depth, packet_length, cmock_retval) BinaryUpdate_write_CMockExpectWithArrayAndReturn(__LINE__, write_buffer, write_buffer_Depth, packet_length, cmock_retval)
void BinaryUpdate_write_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* write_buffer, int write_buffer_Depth, const uint32_t packet_length, bool cmock_to_return);
#define BinaryUpdate_write_ReturnThruPtr_write_buffer(write_buffer) BinaryUpdate_write_CMockReturnMemThruPtr_write_buffer(__LINE__, write_buffer, sizeof(uint8_t))
#define BinaryUpdate_write_ReturnArrayThruPtr_write_buffer(write_buffer, cmock_len) BinaryUpdate_write_CMockReturnMemThruPtr_write_buffer(__LINE__, write_buffer, cmock_len * sizeof(*write_buffer))
#define BinaryUpdate_write_ReturnMemThruPtr_write_buffer(write_buffer, cmock_size) BinaryUpdate_write_CMockReturnMemThruPtr_write_buffer(__LINE__, write_buffer, cmock_size)
void BinaryUpdate_write_CMockReturnMemThruPtr_write_buffer(UNITY_LINE_TYPE cmock_line, uint8_t const* write_buffer, size_t cmock_size);
#define BinaryUpdate_write_IgnoreArg_write_buffer() BinaryUpdate_write_CMockIgnoreArg_write_buffer(__LINE__)
void BinaryUpdate_write_CMockIgnoreArg_write_buffer(UNITY_LINE_TYPE cmock_line);
#define BinaryUpdate_write_IgnoreArg_packet_length() BinaryUpdate_write_CMockIgnoreArg_packet_length(__LINE__)
void BinaryUpdate_write_CMockIgnoreArg_packet_length(UNITY_LINE_TYPE cmock_line);
#define BinaryUpdate_finish_IgnoreAndReturn(cmock_retval) BinaryUpdate_finish_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void BinaryUpdate_finish_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define BinaryUpdate_finish_StopIgnore() BinaryUpdate_finish_CMockStopIgnore()
void BinaryUpdate_finish_CMockStopIgnore(void);
#define BinaryUpdate_finish_ExpectAndReturn(cmock_retval) BinaryUpdate_finish_CMockExpectAndReturn(__LINE__, cmock_retval)
void BinaryUpdate_finish_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
typedef bool (* CMOCK_BinaryUpdate_finish_CALLBACK)(int cmock_num_calls);
void BinaryUpdate_finish_AddCallback(CMOCK_BinaryUpdate_finish_CALLBACK Callback);
void BinaryUpdate_finish_Stub(CMOCK_BinaryUpdate_finish_CALLBACK Callback);
#define BinaryUpdate_finish_StubWithCallback BinaryUpdate_finish_Stub

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
