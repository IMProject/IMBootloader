/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_HASH_ADAPTER_H
#define _MOCK_HASH_ADAPTER_H

#include "unity.h"
#include "hash_adapter.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_hash_adapter_Init(void);
void mock_hash_adapter_Destroy(void);
void mock_hash_adapter_Verify(void);




#define HashAdapter_getHashedBoardId_Ignore() HashAdapter_getHashedBoardId_CMockIgnore()
void HashAdapter_getHashedBoardId_CMockIgnore(void);
#define HashAdapter_getHashedBoardId_StopIgnore() HashAdapter_getHashedBoardId_CMockStopIgnore()
void HashAdapter_getHashedBoardId_CMockStopIgnore(void);
#define HashAdapter_getHashedBoardId_ExpectAnyArgs() HashAdapter_getHashedBoardId_CMockExpectAnyArgs(__LINE__)
void HashAdapter_getHashedBoardId_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define HashAdapter_getHashedBoardId_Expect(hashed_board_id) HashAdapter_getHashedBoardId_CMockExpect(__LINE__, hashed_board_id)
void HashAdapter_getHashedBoardId_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t* hashed_board_id);
typedef void (* CMOCK_HashAdapter_getHashedBoardId_CALLBACK)(uint8_t* hashed_board_id, int cmock_num_calls);
void HashAdapter_getHashedBoardId_AddCallback(CMOCK_HashAdapter_getHashedBoardId_CALLBACK Callback);
void HashAdapter_getHashedBoardId_Stub(CMOCK_HashAdapter_getHashedBoardId_CALLBACK Callback);
#define HashAdapter_getHashedBoardId_StubWithCallback HashAdapter_getHashedBoardId_Stub
#define HashAdapter_getHashedBoardId_ExpectWithArray(hashed_board_id, hashed_board_id_Depth) HashAdapter_getHashedBoardId_CMockExpectWithArray(__LINE__, hashed_board_id, hashed_board_id_Depth)
void HashAdapter_getHashedBoardId_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, uint8_t* hashed_board_id, int hashed_board_id_Depth);
#define HashAdapter_getHashedBoardId_ReturnThruPtr_hashed_board_id(hashed_board_id) HashAdapter_getHashedBoardId_CMockReturnMemThruPtr_hashed_board_id(__LINE__, hashed_board_id, sizeof(uint8_t))
#define HashAdapter_getHashedBoardId_ReturnArrayThruPtr_hashed_board_id(hashed_board_id, cmock_len) HashAdapter_getHashedBoardId_CMockReturnMemThruPtr_hashed_board_id(__LINE__, hashed_board_id, cmock_len * sizeof(*hashed_board_id))
#define HashAdapter_getHashedBoardId_ReturnMemThruPtr_hashed_board_id(hashed_board_id, cmock_size) HashAdapter_getHashedBoardId_CMockReturnMemThruPtr_hashed_board_id(__LINE__, hashed_board_id, cmock_size)
void HashAdapter_getHashedBoardId_CMockReturnMemThruPtr_hashed_board_id(UNITY_LINE_TYPE cmock_line, uint8_t const* hashed_board_id, size_t cmock_size);
#define HashAdapter_getHashedBoardId_IgnoreArg_hashed_board_id() HashAdapter_getHashedBoardId_CMockIgnoreArg_hashed_board_id(__LINE__)
void HashAdapter_getHashedBoardId_CMockIgnoreArg_hashed_board_id(UNITY_LINE_TYPE cmock_line);
#define HashAdapter_getBase64HashedBoardId_IgnoreAndReturn(cmock_retval) HashAdapter_getBase64HashedBoardId_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void HashAdapter_getBase64HashedBoardId_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define HashAdapter_getBase64HashedBoardId_StopIgnore() HashAdapter_getBase64HashedBoardId_CMockStopIgnore()
void HashAdapter_getBase64HashedBoardId_CMockStopIgnore(void);
#define HashAdapter_getBase64HashedBoardId_ExpectAnyArgsAndReturn(cmock_retval) HashAdapter_getBase64HashedBoardId_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void HashAdapter_getBase64HashedBoardId_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define HashAdapter_getBase64HashedBoardId_ExpectAndReturn(b64_hashed_board_id_str, b64_hashed_board_id_str_size, cmock_retval) HashAdapter_getBase64HashedBoardId_CMockExpectAndReturn(__LINE__, b64_hashed_board_id_str, b64_hashed_board_id_str_size, cmock_retval)
void HashAdapter_getBase64HashedBoardId_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* b64_hashed_board_id_str, size_t b64_hashed_board_id_str_size, bool cmock_to_return);
typedef bool (* CMOCK_HashAdapter_getBase64HashedBoardId_CALLBACK)(uint8_t* b64_hashed_board_id_str, size_t b64_hashed_board_id_str_size, int cmock_num_calls);
void HashAdapter_getBase64HashedBoardId_AddCallback(CMOCK_HashAdapter_getBase64HashedBoardId_CALLBACK Callback);
void HashAdapter_getBase64HashedBoardId_Stub(CMOCK_HashAdapter_getBase64HashedBoardId_CALLBACK Callback);
#define HashAdapter_getBase64HashedBoardId_StubWithCallback HashAdapter_getBase64HashedBoardId_Stub
#define HashAdapter_getBase64HashedBoardId_ExpectWithArrayAndReturn(b64_hashed_board_id_str, b64_hashed_board_id_str_Depth, b64_hashed_board_id_str_size, cmock_retval) HashAdapter_getBase64HashedBoardId_CMockExpectWithArrayAndReturn(__LINE__, b64_hashed_board_id_str, b64_hashed_board_id_str_Depth, b64_hashed_board_id_str_size, cmock_retval)
void HashAdapter_getBase64HashedBoardId_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* b64_hashed_board_id_str, int b64_hashed_board_id_str_Depth, size_t b64_hashed_board_id_str_size, bool cmock_to_return);
#define HashAdapter_getBase64HashedBoardId_ReturnThruPtr_b64_hashed_board_id_str(b64_hashed_board_id_str) HashAdapter_getBase64HashedBoardId_CMockReturnMemThruPtr_b64_hashed_board_id_str(__LINE__, b64_hashed_board_id_str, sizeof(uint8_t))
#define HashAdapter_getBase64HashedBoardId_ReturnArrayThruPtr_b64_hashed_board_id_str(b64_hashed_board_id_str, cmock_len) HashAdapter_getBase64HashedBoardId_CMockReturnMemThruPtr_b64_hashed_board_id_str(__LINE__, b64_hashed_board_id_str, cmock_len * sizeof(*b64_hashed_board_id_str))
#define HashAdapter_getBase64HashedBoardId_ReturnMemThruPtr_b64_hashed_board_id_str(b64_hashed_board_id_str, cmock_size) HashAdapter_getBase64HashedBoardId_CMockReturnMemThruPtr_b64_hashed_board_id_str(__LINE__, b64_hashed_board_id_str, cmock_size)
void HashAdapter_getBase64HashedBoardId_CMockReturnMemThruPtr_b64_hashed_board_id_str(UNITY_LINE_TYPE cmock_line, uint8_t const* b64_hashed_board_id_str, size_t cmock_size);
#define HashAdapter_getBase64HashedBoardId_IgnoreArg_b64_hashed_board_id_str() HashAdapter_getBase64HashedBoardId_CMockIgnoreArg_b64_hashed_board_id_str(__LINE__)
void HashAdapter_getBase64HashedBoardId_CMockIgnoreArg_b64_hashed_board_id_str(UNITY_LINE_TYPE cmock_line);
#define HashAdapter_getBase64HashedBoardId_IgnoreArg_b64_hashed_board_id_str_size() HashAdapter_getBase64HashedBoardId_CMockIgnoreArg_b64_hashed_board_id_str_size(__LINE__)
void HashAdapter_getBase64HashedBoardId_CMockIgnoreArg_b64_hashed_board_id_str_size(UNITY_LINE_TYPE cmock_line);
#define BoardInfo_decodeBase64ManufacturerId_IgnoreAndReturn(cmock_retval) BoardInfo_decodeBase64ManufacturerId_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void BoardInfo_decodeBase64ManufacturerId_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define BoardInfo_decodeBase64ManufacturerId_StopIgnore() BoardInfo_decodeBase64ManufacturerId_CMockStopIgnore()
void BoardInfo_decodeBase64ManufacturerId_CMockStopIgnore(void);
#define BoardInfo_decodeBase64ManufacturerId_ExpectAnyArgsAndReturn(cmock_retval) BoardInfo_decodeBase64ManufacturerId_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void BoardInfo_decodeBase64ManufacturerId_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define BoardInfo_decodeBase64ManufacturerId_ExpectAndReturn(manufacturer_id, cmock_retval) BoardInfo_decodeBase64ManufacturerId_CMockExpectAndReturn(__LINE__, manufacturer_id, cmock_retval)
void BoardInfo_decodeBase64ManufacturerId_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* manufacturer_id, bool cmock_to_return);
typedef bool (* CMOCK_BoardInfo_decodeBase64ManufacturerId_CALLBACK)(uint8_t* manufacturer_id, int cmock_num_calls);
void BoardInfo_decodeBase64ManufacturerId_AddCallback(CMOCK_BoardInfo_decodeBase64ManufacturerId_CALLBACK Callback);
void BoardInfo_decodeBase64ManufacturerId_Stub(CMOCK_BoardInfo_decodeBase64ManufacturerId_CALLBACK Callback);
#define BoardInfo_decodeBase64ManufacturerId_StubWithCallback BoardInfo_decodeBase64ManufacturerId_Stub
#define BoardInfo_decodeBase64ManufacturerId_ExpectWithArrayAndReturn(manufacturer_id, manufacturer_id_Depth, cmock_retval) BoardInfo_decodeBase64ManufacturerId_CMockExpectWithArrayAndReturn(__LINE__, manufacturer_id, manufacturer_id_Depth, cmock_retval)
void BoardInfo_decodeBase64ManufacturerId_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* manufacturer_id, int manufacturer_id_Depth, bool cmock_to_return);
#define BoardInfo_decodeBase64ManufacturerId_ReturnThruPtr_manufacturer_id(manufacturer_id) BoardInfo_decodeBase64ManufacturerId_CMockReturnMemThruPtr_manufacturer_id(__LINE__, manufacturer_id, sizeof(uint8_t))
#define BoardInfo_decodeBase64ManufacturerId_ReturnArrayThruPtr_manufacturer_id(manufacturer_id, cmock_len) BoardInfo_decodeBase64ManufacturerId_CMockReturnMemThruPtr_manufacturer_id(__LINE__, manufacturer_id, cmock_len * sizeof(*manufacturer_id))
#define BoardInfo_decodeBase64ManufacturerId_ReturnMemThruPtr_manufacturer_id(manufacturer_id, cmock_size) BoardInfo_decodeBase64ManufacturerId_CMockReturnMemThruPtr_manufacturer_id(__LINE__, manufacturer_id, cmock_size)
void BoardInfo_decodeBase64ManufacturerId_CMockReturnMemThruPtr_manufacturer_id(UNITY_LINE_TYPE cmock_line, uint8_t const* manufacturer_id, size_t cmock_size);
#define BoardInfo_decodeBase64ManufacturerId_IgnoreArg_manufacturer_id() BoardInfo_decodeBase64ManufacturerId_CMockIgnoreArg_manufacturer_id(__LINE__)
void BoardInfo_decodeBase64ManufacturerId_CMockIgnoreArg_manufacturer_id(UNITY_LINE_TYPE cmock_line);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
